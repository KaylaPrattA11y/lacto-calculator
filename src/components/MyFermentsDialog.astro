<dialog id="myFermentsDialog">
  <div class="dialog-header">
    <h2 id="myFermentsHeading">My ferments</h2>
    <button aria-controls="myFermentsDialog" aria-haspopup="dialog" aria-label="Close" class="btn-default">
      <kay-icon class="carbon:close" aria-hidden="true"></kay-icon>
    </button>
  </div>
  <div id="myFermentsFilter" role="group" aria-label="Ferment list visibility options">
    <button type="button" tabindex="0" role="radio" aria-checked="true" data-value="0">View All</button>
    <button type="button" tabindex="-1" role="radio" aria-checked="false" data-value="1">In Progress</button>
    <button type="button" tabindex="-1" role="radio" aria-checked="false" data-value="2">Completed</button>
  </div>
  <div class="dialog-main">
    <ul id="myFermentsList"></ul>
  </div>
</dialog>

<style>
  ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }
  ul:empty::after {
    content: "No ferments saved.";
  }
  [role="group"] {
    display: flex;
    gap: 0.25rem;
    margin-inline: 1rem;
    border-bottom: 1px solid var(--border-color);
  }
  [role="radio"] {
    color: var(--text-color);
    padding: 0.5rem 1rem;
    border: 0;
    border-radius: 0.5rem 0.5rem 0 0;
    cursor: pointer;
  }
  [role="radio"][aria-checked="true"] {
    background: var(--calc-output-background-color);
  }
  [role="radio"][aria-checked="false"] {
    background: none;
  }
</style>

<script>
  class Filter {
    constructor() {
      this.group = document.getElementById("myFermentsFilter");
      this.buttons = this.group.querySelectorAll("[data-value]");
      this.ferments = document.getElementById("myFermentsList").querySelectorAll(".ferment");
    }

    init() {
      this.addEventListeners();
    }

    addEventListeners = () => {
      this.buttons.forEach(button => {
        button.addEventListener("click", e => this.select(e.target.dataset.value));
        button.addEventListener("keydown", e => this.handleNavigation(e));
      });
    };

    select(value) {
      this.reset();
      this.group.querySelector(`[data-value="${value}"]`).setAttribute("aria-checked", "true");
      this.group.querySelector(`[data-value="${value}"]`).setAttribute("tabindex", "0");
      this.updateVisibility(value);
    }

    reset() {
      this.buttons.forEach(button => {
        button.setAttribute("aria-checked", "false");
        button.setAttribute("tabindex", "-1");
      });
    }

    updateVisibility(value) {
      if (value === "0") {
        this.ferments.forEach(f => f.removeAttribute("hidden"));
      }
      if (value === "1") {
        this.ferments.forEach(f => {
          const isInProgress = f.dataset.complete === "false";

          f.toggleAttribute("hidden", !isInProgress);
        });
      }
      if (value === "2") {
        this.ferments.forEach(f => {
          const isComplete = f.dataset.complete === "true";

          f.toggleAttribute("hidden", !isComplete);
        });
      }
    }

    handleNavigation = e => {
      const l = e.code === "ArrowLeft";
      const r = e.code === "ArrowRight";
      if (!l && !r) return;

      const p = e.target.previousElementSibling;
      const n = e.target.nextElementSibling;

      if (l && p) {
        this.select(p.dataset.value);
        p.focus();
      }
      if (r && n) {
        this.select(n.dataset.value);
        n.focus();
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const filter = new Filter();
    filter.init();
  });
</script>